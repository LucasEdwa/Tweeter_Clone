datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  refresh_token_expires_in Int? // @db.Text
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  following     follow[]  @relation("following")
  followed      follow[]  @relation("followed")
  posts         Post[]
  likes         Like[]
  replies       Reply[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model follow {
  id          String @id @default(cuid())
  followingId String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followedId  String
  followed    User   @relation("followed", fields: [followedId], references: [id], onDelete: Cascade)

  @@unique([followedId, followingId])
}

model Post {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  content    String
  created_at DateTime @default(now())
  likes      Like[]
  replies    Reply[]
}

model Like {
  id      String  @id @default(cuid())
  post    Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String?
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  reply   Reply?  @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId String?
}

model Reply {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  post       Post     @relation(fields: [postId], references: [id])
  postId     String
  content    String
  created_at DateTime @default(now())
  likes      Like[]
}
